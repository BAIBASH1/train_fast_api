"""
Background Tasks (Celery) for Image Processing and Email Sending.

This module defines background tasks that are handled by Celery. It includes tasks for processing
images (resizing them to different resolutions) and sending booking confirmation emails.

Tasks:
    - proceed_picture: Resizes uploaded images to different sizes and stores them.
    - send_bookings_confirmation_email: Sends a booking confirmation email to the user.
"""

import smtplib
from pathlib import Path

from PIL import Image
from pydantic import EmailStr

from app.tasks.celery import celery
from app.tasks.email_templates import create_bookings_confirmation_template
from config import settings

MEDIUM_IMAGE_WIDTH = 1000
MEDIUM_IMAGE_HEIGHT = 500

SMALL_IMAGE_WIDTH = 200
SMALL_IMAGE_HEIGHT = 100


@celery.task
def proceed_picture(
    path: str,
):
    """
    Resizes images to specified sizes and saves them.

    This task takes an image path, opens the image, and creates resized versions of the image
    with two different resolutions: 1000x500 and 200x100. The resized images are then saved
    to the file system.

    Args:
        path (str): The file path of the image to be processed.
    """
    im_path = Path(path)
    im = Image.open(im_path)
    im_resized_1000_500 = im.resize((MEDIUM_IMAGE_WIDTH, MEDIUM_IMAGE_HEIGHT))
    im_resized_200_100 = im.resize((SMALL_IMAGE_WIDTH, SMALL_IMAGE_HEIGHT))
    im_resized_1000_500.save(
        f"app/static/images/resized_1000_500_{im_path.name}"
    )
    im_resized_200_100.save(
        f"app/static/images/resized_200_100_{im_path.name}"
    )


@celery.task
def send_bookings_confirmation_email(
    bookings: dict,
    email_to: EmailStr,
):
    """
    Sends a booking confirmation email.

    This task sends an email to the user with the details of their booking, using the
    template generated by `create_bookings_confirmation_template`.

    Args:
        bookings (dict): The booking information to be included in the confirmation email.
        email_to (EmailStr): The email address to send the confirmation to.
    """
    msg_content = create_bookings_confirmation_template(
        bookings=bookings,
        email_to=email_to,
    )

    with smtplib.SMTP_SSL(settings.SMTP_HOST, settings.SMTP_PORT) as server:
        server.login(settings.SMTP_USER, settings.SMTP_PASS)
        server.send_message(msg_content)
